#!/opt/bin/php -c/opt/php.ini
<?php
use Bref\Http\LambdaResponse;
use Symfony\Component\Process\Process;
use hollodotme\FastCGI\Client;
use hollodotme\FastCGI\Requests\AbstractRequest;
use hollodotme\FastCGI\SocketConnections\UnixDomainSocket;

echo 'Cold start' . PHP_EOL;

ini_set('display_errors', '1');
error_reporting(E_ALL);

$lambdaRuntimeApi = getenv('AWS_LAMBDA_RUNTIME_API');

require __DIR__ . '/vendor/autoload.php';

$socket = '/tmp/php-fpm.sock';

function is_server_started($socket)
{
    clearstatcache(false, $socket);
    return file_exists($socket);
}

function wait_for_server($socket)
{
    $wait = 5000; // 5ms
    $timeout = 5000000; // 5 secs
    $elapsed = 0;
    while (! is_server_started($socket)) {
        usleep($wait);
        $elapsed += $wait;
        if ($elapsed > $timeout) {
            echo "Timeout while waiting for socket at {$socket}..";
            exit(1);
        }
    }

    echo "FastCGI started on {$socket}";
}

function start_server()
{
    $config =  __DIR__ .'/php-fpm.conf';
    $cgi = new Process("php-fpm --fpm-config {$config} -c /opt/php.ini -d extension_dir=/opt/php/extensions --nodaemonize");
    $cgi->setTimeout(null);
    $cgi->start(function ($type, $output) {
        if ($type === Process::ERR) {
            echo($output);
            exit(1);
        }
    });

    register_shutdown_function(function() use(&$cgi) {
        $cgi->stop();
    });
}

start_server();
wait_for_server($socket);

$client  = new Client(new UnixDomainSocket($socket, 5000, 30000));

while (true) {
    // This is a blocking HTTP call until an event is available
    [$event, $invocationId] = waitForEventFromLambdaApi($lambdaRuntimeApi);

    if (!is_server_started($socket)) {
        start_server();
        wait_for_server($socket);
    }

    $scriptFilename = __DIR__ . '/' . getenv('_HANDLER');
    $method = $event['httpMethod'] ?? 'GET';
    $content = $event['body'] ?? '';

    $request = new class($method, $scriptFilename, $content) extends AbstractRequest {
        private $method;
        public function __construct(string $method, string $scriptFilename, string $content)
        {
            $this->method = $method;
            parent::__construct($scriptFilename, $content);
        }

        public function getRequestMethod(): string
        {
            return $this->method;
        }
    };

    $request->setRequestUri($event['path'] ?? '/');
    $request->setRemoteAddress('127.0.0.1');
    $request->setRemotePort(80);
    $request->setServerName('127.0.0.1');
    $request->setServerPort(80);

    if (isset($event['headers']['Host'])) {
        $request->setServerName($event['headers']['Host']);
    }

    if (isset($event['headers']['Content-Type'])) {
        $request->setContentType($event['headers']['Content-Type']);
    }

    if (isset($event['queryStringParameters'])) {
        $request->setCustomVar('QUERY_STRING',  http_build_query($event['queryStringParameters']));
    }

    foreach ($event['headers'] as $header => $value) {
        $key = 'HTTP_' . strtoupper(str_replace('-', '_', $header));
        $request->setCustomVar($key, $value);
    }

    try {
        $response = $client->sendRequest($request);
    } catch (\hollodotme\FastCGI\Exceptions\TimedoutException $e) {
        fail($lambdaRuntimeApi, $invocationId, 'Gateway Timeout', 504);
        continue;
    }

    $headers = $response->getHeaders();
    $headers['status'] = $headers['status'] ?? '200 Ok';

    list($status) = explode(' ', $headers['status']);

    $lambdaResponse = new LambdaResponse($status, $headers, $response->getBody());

    signalSuccessToLambdaApi($lambdaRuntimeApi, $invocationId, $lambdaResponse);
}

function waitForEventFromLambdaApi(string $lambdaRuntimeApi): ?array
{
    $ch = curl_init("http://$lambdaRuntimeApi/2018-06-01/runtime/invocation/next");

    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);
    curl_setopt($ch, CURLOPT_FAILONERROR, true);

    $invocationId = '';

    curl_setopt($ch, CURLOPT_HEADERFUNCTION, function ($ch, $header) use (&$invocationId) {
        if (! preg_match('/:\s*/', $header)) {
            return strlen($header);
        }

        [$name, $value] = preg_split('/:\s*/', $header, 2);

        if (strtolower($name) == 'lambda-runtime-aws-request-id') {
            $invocationId = trim($value);
        }

        return strlen($header);
    });

    $body = '';

    curl_setopt($ch, CURLOPT_WRITEFUNCTION, function ($ch, $chunk) use (&$body) {
        $body .= $chunk;

        return strlen($chunk);
    });

    curl_exec($ch);

    if (curl_error($ch)) {
        die('Failed to fetch next Lambda invocation: ' . curl_error($ch) . "\n");
    }

    if ($invocationId == '') {
        die('Failed to determine Lambda invocation ID');
    }

    curl_close($ch);

    if (! $body) {
        die("Empty Lambda invocation response\n");
    }

    $event = json_decode($body, true);

    if (! array_key_exists('requestContext', $event)) {
        fail($lambdaRuntimeApi, $invocationId, 'Event is not an API Gateway request');
        return null;
    }

    return [$event, $invocationId];
}

function signalSuccessToLambdaApi(string $lambdaRuntimeApi, string $invocationId, LambdaResponse $response)
{
    $ch = curl_init("http://$lambdaRuntimeApi/2018-06-01/runtime/invocation/$invocationId/response");

    $response_json = $response->toJson();

    curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_POSTFIELDS, $response_json);
    curl_setopt($ch, CURLOPT_HTTPHEADER, [
        'Content-Type: application/json',
        'Content-Length: ' . strlen($response_json),
    ]);

    curl_exec($ch);
    curl_close($ch);
}

function fail($lambdaRuntimeApi, $invocationId, $errorMessage, $statusCode = 500)
{
    $ch = curl_init("http://$lambdaRuntimeApi/2018-06-01/runtime/invocation/$invocationId/response");

    $response = [];

    $response['statusCode'] = $statusCode;
    $response['body'] = $errorMessage;

    $response_json = json_encode($response);

    curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_POSTFIELDS, $response_json);
    curl_setopt($ch, CURLOPT_HTTPHEADER, [
        'Content-Type: application/json',
        'Content-Length: ' . strlen($response_json),
    ]);

    curl_exec($ch);
    curl_close($ch);
}
